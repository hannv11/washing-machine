CCS PCM C Compiler, Version 5.025, 29294               03-Jul-25 12:24

               Filename:   C:\Users\hanva\HUST\WashingMachine\main.lst

               ROM used:   136 words (2%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           10 (3%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   021
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  C0
0009:  RETLW  F9
000A:  RETLW  A4
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #fuses XT, NOWDT, NOLVP 
.................... #use delay(crystal=20000000) 
000B:  MOVLW  24
000C:  MOVWF  04
000D:  BCF    03.7
000E:  MOVF   00,W
000F:  BTFSC  03.2
0010:  GOTO   01E
0011:  MOVLW  06
0012:  MOVWF  78
0013:  CLRF   77
0014:  DECFSZ 77,F
0015:  GOTO   014
0016:  DECFSZ 78,F
0017:  GOTO   013
0018:  MOVLW  7B
0019:  MOVWF  77
001A:  DECFSZ 77,F
001B:  GOTO   01A
001C:  DECFSZ 00,F
001D:  GOTO   011
001E:  BCF    0A.3
001F:  BCF    0A.4
0020:  GOTO   062 (RETURN)
....................  
....................  
....................  
.................... const int8 LED7[3] = { 
.................... ~0x3F, ~0x06, ~0x5B 
.................... }; 
....................  
....................  
.................... int8 count = 0; 
....................  
.................... void main() 
0021:  MOVF   03,W
0022:  ANDLW  1F
0023:  MOVWF  03
0024:  CLRF   20
0025:  MOVLW  FF
0026:  MOVWF  21
0027:  BSF    03.5
0028:  BSF    1F.0
0029:  BSF    1F.1
002A:  BSF    1F.2
002B:  BCF    1F.3
002C:  MOVLW  07
002D:  MOVWF  1C
002E:  BCF    03.7
.................... { 
....................  
....................    int x, y; 
....................    output_D(0); 
002F:  CLRF   08
0030:  BCF    03.5
0031:  CLRF   08
....................    set_tris_d(1111111);       // PORTD là output 
0032:  MOVLW  47
0033:  BSF    03.5
0034:  MOVWF  08
....................    set_tris_c(0xFF);       // RC0 là input 
0035:  MOVLW  FF
0036:  MOVWF  07
0037:  BCF    03.5
0038:  MOVWF  21
....................    output_d(LED7[count]);  // Hi?n th? ban d?u là 0 
0039:  MOVF   20,W
003A:  CALL   004
003B:  MOVWF  24
003C:  BSF    03.5
003D:  CLRF   08
003E:  BCF    03.5
003F:  MOVF   24,W
0040:  MOVWF  08
....................     
....................    while(1) 
....................    { 
....................       x = input(PIN_C0); 
0041:  BSF    21.0
0042:  MOVF   21,W
0043:  BSF    03.5
0044:  MOVWF  07
0045:  BCF    03.5
0046:  CLRF   22
0047:  BTFSC  07.0
0048:  INCF   22,F
....................       y = input(PIN_C1); 
0049:  BSF    21.1
004A:  MOVF   21,W
004B:  BSF    03.5
004C:  MOVWF  07
004D:  BCF    03.5
004E:  CLRF   23
004F:  BTFSC  07.1
0050:  INCF   23,F
....................       if (x == 1) output_low(PIN_B0); 
0051:  DECFSZ 22,W
0052:  GOTO   057
0053:  BSF    03.5
0054:  BCF    06.0
0055:  BCF    03.5
0056:  BCF    06.0
....................       if (x == 1) output_low(PIN_B1); 
0057:  DECFSZ 22,W
0058:  GOTO   05D
0059:  BSF    03.5
005A:  BCF    06.1
005B:  BCF    03.5
005C:  BCF    06.1
....................       if (y == 1) { 
005D:  DECFSZ 23,W
005E:  GOTO   078
....................          delay_ms(20); // hold btn 
005F:  MOVLW  14
0060:  MOVWF  24
0061:  GOTO   00B
....................          if (y == 1) { 
0062:  DECFSZ 23,W
0063:  GOTO   078
....................             count++; 
0064:  INCF   20,F
....................             if (count > 2) count = 0;  
0065:  MOVF   20,W
0066:  SUBLW  02
0067:  BTFSS  03.0
0068:  CLRF   20
....................             output_d(LED7[count]); 
0069:  MOVF   20,W
006A:  CALL   004
006B:  MOVWF  24
006C:  BSF    03.5
006D:  CLRF   08
006E:  BCF    03.5
006F:  MOVF   24,W
0070:  MOVWF  08
....................             while (input(PIN_C1) == 1);  // Ch? th? nút 
0071:  BSF    21.1
0072:  MOVF   21,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  BTFSC  07.1
0077:  GOTO   071
....................          } 
....................       } 
....................       if (x == 0) output_high(PIN_B0); 
0078:  MOVF   22,F
0079:  BTFSS  03.2
007A:  GOTO   07F
007B:  BSF    03.5
007C:  BCF    06.0
007D:  BCF    03.5
007E:  BSF    06.0
....................       if (x == 0) output_high(PIN_B1); 
007F:  MOVF   22,F
0080:  BTFSS  03.2
0081:  GOTO   086
0082:  BSF    03.5
0083:  BCF    06.1
0084:  BCF    03.5
0085:  BSF    06.1
0086:  GOTO   041
....................    } 
....................  
.................... } 
....................  
0087:  SLEEP
....................  

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
